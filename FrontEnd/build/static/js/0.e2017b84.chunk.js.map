{"version":3,"sources":["../node_modules/@material-ui/core/esm/Input/Input.js","../node_modules/@material-ui/core/esm/TextareaAutosize/TextareaAutosize.js","../node_modules/@material-ui/core/esm/InputBase/InputBase.js","../node_modules/@material-ui/core/esm/FormControl/formControlState.js","../node_modules/@material-ui/core/esm/InputBase/utils.js"],"names":["Input","forwardRef","props","ref","disableUnderline","classes","_props$fullWidth","fullWidth","_props$inputComponent","inputComponent","_props$multiline","multiline","_props$type","type","other","createElement","root","underline","muiName","theme","light","palette","bottomLineColor","position","formControl","marginTop","focused","disabled","borderBottom","concat","primary","left","bottom","content","right","transform","transition","transitions","create","duration","shorter","easing","easeOut","pointerEvents","borderBottomColor","error","main","text","borderBottomStyle","input","inputMarginDense","inputMultiline","inputTypeSearch","name","getStyleValue","computedStyle","property","parseInt","useEnhancedEffect","window","useLayoutEffect","useEffect","styles","visibility","overflow","height","top","onChange","rows","rowsMax","style","value","isControlled","useRef","current","inputRef","handleRef","shadowRef","_React$useState","useState","state","setState","syncHeight","useCallback","getComputedStyle","inputShallow","width","placeholder","boxSizing","padding","border","innerHeight","scrollHeight","singleRowHeight","outerHeight","Math","max","Number","min","outerHeightStyle","prevState","abs","handleResize","debounce","addEventListener","clear","removeEventListener","Fragment","event","className","readOnly","tabIndex","ariaDescribedby","autoComplete","autoFocus","classNameProp","defaultValue","endAdornment","id","_props$inputProps","inputProps","inputPropsClassName","inputPropsProp","inputRefProp","margin","onBlur","onClick","onFocus","onKeyDown","onKeyUp","renderSuffix","_props$select","select","startAdornment","handleInputRefWarning","instance","handleInputPropsRefProp","handleInputRefProp","handleInputRef","setFocused","muiFormControl","fcs","formControlState","states","checkDirty","obj","onFilled","onEmpty","InputComponent","adornedStart","adornedEnd","dense","marginDense","currentTarget","target","focus","FormControlContext","Provider","inputSelect","hiddenLabel","inputHiddenLabel","inputAdornedStart","inputAdornedEnd","search","element","TypeError","_len","arguments","length","args","Array","_key","apply","stopPropagation","required","withStyles","color","opacity","placeholderHidden","placeholderVisible","fontFamily","typography","fontSize","pxToRem","lineHeight","cursor","display","alignItems","paddingTop","font","background","WebkitTapHighlightColor","minWidth","outline","boxShadow","paddingRight","resize","_ref","reduce","acc","hasValue","isArray","isFilled","SSR","undefined","isAdornedStart"],"mappings":"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","file":"static/js/0.e2017b84.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport InputBase from '../InputBase';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  var light = theme.palette.type === 'light';\n  var bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative'\n    },\n\n    /* Styles applied to the root element if the component is a descendant of `FormControl`. */\n    formControl: {\n      'label + &': {\n        marginTop: 16\n      }\n    },\n\n    /* Styles applied to the root element if the component is focused. */\n    focused: {},\n\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `disableUnderline={false}`. */\n    underline: {\n      '&:after': {\n        borderBottom: \"2px solid \".concat(theme.palette.primary[light ? 'dark' : 'light']),\n        left: 0,\n        bottom: 0,\n        // Doing the other way around crash on IE 11 \"''\" https://github.com/cssinjs/jss/issues/242\n        content: '\"\"',\n        position: 'absolute',\n        right: 0,\n        transform: 'scaleX(0)',\n        transition: theme.transitions.create('transform', {\n          duration: theme.transitions.duration.shorter,\n          easing: theme.transitions.easing.easeOut\n        }),\n        pointerEvents: 'none' // Transparent to the hover style.\n\n      },\n      '&$focused:after': {\n        transform: 'scaleX(1)'\n      },\n      '&$error:after': {\n        borderBottomColor: theme.palette.error.main,\n        transform: 'scaleX(1)' // error is always underlined in red\n\n      },\n      '&:before': {\n        borderBottom: \"1px solid \".concat(bottomLineColor),\n        left: 0,\n        bottom: 0,\n        // Doing the other way around crash on IE 11 \"''\" https://github.com/cssinjs/jss/issues/242\n        content: '\"\\\\00a0\"',\n        position: 'absolute',\n        right: 0,\n        transition: theme.transitions.create('border-bottom-color', {\n          duration: theme.transitions.duration.shorter\n        }),\n        pointerEvents: 'none' // Transparent to the hover style.\n\n      },\n      '&:hover:not($disabled):before': {\n        borderBottom: \"2px solid \".concat(theme.palette.text.primary),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          borderBottom: \"1px solid \".concat(bottomLineColor)\n        }\n      },\n      '&$disabled:before': {\n        borderBottomStyle: 'dotted'\n      }\n    },\n\n    /* Styles applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Styles applied to the root element if `multiline={true}`. */\n    multiline: {},\n\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {},\n\n    /* Styles applied to the `input` element. */\n    input: {},\n\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    inputMarginDense: {},\n\n    /* Styles applied to the `input` element if `multiline={true}`. */\n    inputMultiline: {},\n\n    /* Styles applied to the `input` element if `type=\"search\"`. */\n    inputTypeSearch: {}\n  };\n};\nvar Input = React.forwardRef(function Input(props, ref) {\n  var disableUnderline = props.disableUnderline,\n      classes = props.classes,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      _props$inputComponent = props.inputComponent,\n      inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      _props$type = props.type,\n      type = _props$type === void 0 ? 'text' : _props$type,\n      other = _objectWithoutProperties(props, [\"disableUnderline\", \"classes\", \"fullWidth\", \"inputComponent\", \"multiline\", \"type\"]);\n\n  return React.createElement(InputBase, _extends({\n    classes: _extends({}, classes, {\n      root: clsx(classes.root, !disableUnderline && classes.underline),\n      underline: null\n    }),\n    fullWidth: fullWidth,\n    inputComponent: inputComponent,\n    multiline: multiline,\n    ref: ref,\n    type: type\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Input.propTypes = {\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * The CSS class name of the wrapper element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default `input` element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the input will not have an underline.\n   */\n  disableUnderline: PropTypes.bool,\n\n  /**\n   * End `InputAdornment` for this component.\n   */\n  endAdornment: PropTypes.node,\n\n  /**\n   * If `true`, the input will indicate an error. This is normally obtained via context from\n   * FormControl.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * The component used for the native input.\n   * Either a string to use a DOM element or a component.\n   */\n  inputComponent: PropTypes.elementType,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * This prop can be used to pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense', 'none']),\n\n  /**\n   * If `true`, a textarea element will be rendered.\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Start `InputAdornment` for this component.\n   */\n  startAdornment: PropTypes.node,\n\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any\n} : void 0;\nInput.muiName = 'Input';\nexport default withStyles(styles, {\n  name: 'MuiInput'\n})(Input);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from '../utils/debounce';\nimport { useForkRef } from '../utils/reactHelpers';\n\nfunction getStyleValue(computedStyle, property) {\n  return parseInt(computedStyle[property], 10) || 0;\n}\n\nvar useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\nvar styles = {\n  /* Styles applied to the shadow textarea element. */\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0\n  }\n};\nvar TextareaAutosize = React.forwardRef(function TextareaAutosize(props, ref) {\n  var onChange = props.onChange,\n      rows = props.rows,\n      rowsMax = props.rowsMax,\n      style = props.style,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"onChange\", \"rows\", \"rowsMax\", \"style\", \"value\"]);\n\n  var _React$useRef = React.useRef(value != null),\n      isControlled = _React$useRef.current;\n\n  var inputRef = React.useRef(null);\n  var handleRef = useForkRef(ref, inputRef);\n  var shadowRef = React.useRef(null);\n\n  var _React$useState = React.useState({}),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  var syncHeight = React.useCallback(function () {\n    var input = inputRef.current;\n    var computedStyle = window.getComputedStyle(input);\n    var inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n    var boxSizing = computedStyle['box-sizing'];\n    var padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');\n    var border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content\n\n    var innerHeight = inputShallow.scrollHeight - padding; // Measure height of a textarea with a single row\n\n    inputShallow.value = 'x';\n    var singleRowHeight = inputShallow.scrollHeight - padding; // The height of the outer content\n\n    var outerHeight = innerHeight;\n\n    if (rows != null) {\n      outerHeight = Math.max(Number(rows) * singleRowHeight, outerHeight);\n    }\n\n    if (rowsMax != null) {\n      outerHeight = Math.min(Number(rowsMax) * singleRowHeight, outerHeight);\n    }\n\n    outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.\n\n    var outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    setState(function (prevState) {\n      // Need a large enough different to update the height.\n      // This prevents infinite rendering loop.\n      if (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1) {\n        return {\n          innerHeight: innerHeight,\n          outerHeight: outerHeight,\n          outerHeightStyle: outerHeightStyle\n        };\n      }\n\n      return prevState;\n    });\n  }, [setState, rows, rowsMax, props.placeholder]);\n  React.useEffect(function () {\n    var handleResize = debounce(function () {\n      syncHeight();\n    });\n    window.addEventListener('resize', handleResize);\n    return function () {\n      handleResize.clear();\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [syncHeight]);\n  useEnhancedEffect(function () {\n    syncHeight();\n  });\n\n  var handleChange = function handleChange(event) {\n    if (!isControlled) {\n      syncHeight();\n    }\n\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"textarea\", _extends({\n    value: value,\n    onChange: handleChange,\n    ref: handleRef // Apply the rows prop to get a \"correct\" first SSR paint\n    ,\n    rows: rows || 1,\n    style: _extends({\n      height: state.outerHeightStyle,\n      // Need a large enough different to allow scrolling.\n      // This prevents infinite rendering loop.\n      overflow: Math.abs(state.outerHeight - state.innerHeight) <= 1 ? 'hidden' : null\n    }, style)\n  }, other)), React.createElement(\"textarea\", {\n    \"aria-hidden\": true,\n    className: props.className,\n    readOnly: true,\n    ref: shadowRef,\n    tabIndex: -1,\n    style: _extends({}, styles.shadow, {}, style)\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes = {\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * Minimum number of rows to display.\n   */\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Maximum number of rows to display.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  value: PropTypes.any\n} : void 0;\nexport default TextareaAutosize;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n/* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport warning from 'warning';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport formControlState from '../FormControl/formControlState';\nimport FormControlContext, { useFormControl } from '../FormControl/FormControlContext';\nimport withStyles from '../styles/withStyles';\nimport { useForkRef } from '../utils/reactHelpers';\nimport TextareaAutosize from '../TextareaAutosize';\nimport { isFilled } from './utils';\nexport var styles = function styles(theme) {\n  var light = theme.palette.type === 'light';\n  var placeholder = {\n    color: 'currentColor',\n    opacity: light ? 0.42 : 0.5,\n    transition: theme.transitions.create('opacity', {\n      duration: theme.transitions.duration.shorter\n    })\n  };\n  var placeholderHidden = {\n    opacity: '0 !important'\n  };\n  var placeholderVisible = {\n    opacity: light ? 0.42 : 0.5\n  };\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      // Mimics the default input display property used by browsers for an input.\n      fontFamily: theme.typography.fontFamily,\n      color: theme.palette.text.primary,\n      fontSize: theme.typography.pxToRem(16),\n      lineHeight: '1.1875em',\n      // Reset (19px), match the native input line-height\n      boxSizing: 'border-box',\n      // Prevent padding issue with fullWidth.\n      position: 'relative',\n      cursor: 'text',\n      display: 'inline-flex',\n      alignItems: 'center',\n      '&$disabled': {\n        color: theme.palette.text.disabled,\n        cursor: 'default'\n      }\n    },\n\n    /* Styles applied to the root element if the component is a descendant of `FormControl`. */\n    formControl: {},\n\n    /* Styles applied to the root element if the component is focused. */\n    focused: {},\n\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `startAdornment` is provided. */\n    adornedStart: {},\n\n    /* Styles applied to the root element if `endAdornment` is provided. */\n    adornedEnd: {},\n\n    /* Styles applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    marginDense: {},\n\n    /* Styles applied to the root element if `multiline={true}`. */\n    multiline: {\n      padding: \"\".concat(8 - 2, \"px 0 \").concat(8 - 1, \"px\"),\n      '&$marginDense': {\n        paddingTop: 4 - 1\n      }\n    },\n\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {\n      width: '100%'\n    },\n\n    /* Styles applied to the `input` element. */\n    input: {\n      font: 'inherit',\n      color: 'currentColor',\n      padding: \"\".concat(8 - 2, \"px 0 \").concat(8 - 1, \"px\"),\n      border: 0,\n      boxSizing: 'content-box',\n      background: 'none',\n      height: '1.1875em',\n      // Reset (19px), match the native input line-height\n      margin: 0,\n      // Reset for Safari\n      // Remove grey highlight\n      WebkitTapHighlightColor: 'transparent',\n      display: 'block',\n      // Make the flex item shrink with Firefox\n      minWidth: 0,\n      width: '100%',\n      // Fix IE 11 width issue\n      '&::-webkit-input-placeholder': placeholder,\n      '&::-moz-placeholder': placeholder,\n      // Firefox 19+\n      '&:-ms-input-placeholder': placeholder,\n      // IE 11\n      '&::-ms-input-placeholder': placeholder,\n      // Edge\n      '&:focus': {\n        outline: 0\n      },\n      // Reset Firefox invalid required input style\n      '&:invalid': {\n        boxShadow: 'none'\n      },\n      '&::-webkit-search-decoration': {\n        // Remove the padding when type=search.\n        '-webkit-appearance': 'none'\n      },\n      // Show and hide the placeholder logic\n      'label[data-shrink=false] + $formControl &': {\n        '&::-webkit-input-placeholder': placeholderHidden,\n        '&::-moz-placeholder': placeholderHidden,\n        // Firefox 19+\n        '&:-ms-input-placeholder': placeholderHidden,\n        // IE 11\n        '&::-ms-input-placeholder': placeholderHidden,\n        // Edge\n        '&:focus::-webkit-input-placeholder': placeholderVisible,\n        '&:focus::-moz-placeholder': placeholderVisible,\n        // Firefox 19+\n        '&:focus:-ms-input-placeholder': placeholderVisible,\n        // IE 11\n        '&:focus::-ms-input-placeholder': placeholderVisible // Edge\n\n      },\n      '&$disabled': {\n        opacity: 1 // Reset iOS opacity\n\n      }\n    },\n\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    inputMarginDense: {\n      paddingTop: 4 - 1\n    },\n\n    /* Styles applied to the `input` element if `select={true}`. */\n    inputSelect: {\n      paddingRight: 24\n    },\n\n    /* Styles applied to the `input` element if `multiline={true}`. */\n    inputMultiline: {\n      height: 'auto',\n      resize: 'none',\n      padding: 0\n    },\n\n    /* Styles applied to the `input` element if `type=\"search\"`. */\n    inputTypeSearch: {\n      // Improve type search style.\n      '-moz-appearance': 'textfield',\n      '-webkit-appearance': 'textfield'\n    },\n\n    /* Styles applied to the `input` element if `startAdornment` is provided. */\n    inputAdornedStart: {},\n\n    /* Styles applied to the `input` element if `endAdornment` is provided. */\n    inputAdornedEnd: {},\n\n    /* Styles applied to the `input` element if `hiddenLabel={true}`. */\n    inputHiddenLabel: {}\n  };\n};\nvar useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n/**\n * `InputBase` contains as few styles as possible.\n * It aims to be a simple building block for creating an input.\n * It contains a load of style reset and some state logic.\n */\n\nvar InputBase = React.forwardRef(function InputBase(props, ref) {\n  var ariaDescribedby = props['aria-describedby'],\n      autoComplete = props.autoComplete,\n      autoFocus = props.autoFocus,\n      classes = props.classes,\n      classNameProp = props.className,\n      defaultValue = props.defaultValue,\n      disabled = props.disabled,\n      endAdornment = props.endAdornment,\n      error = props.error,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      id = props.id,\n      _props$inputComponent = props.inputComponent,\n      inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,\n      _props$inputProps = props.inputProps;\n  _props$inputProps = _props$inputProps === void 0 ? {} : _props$inputProps;\n\n  var inputPropsClassName = _props$inputProps.className,\n      inputPropsProp = _objectWithoutProperties(_props$inputProps, [\"className\"]),\n      inputRefProp = props.inputRef,\n      margin = props.margin,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onClick = props.onClick,\n      onFocus = props.onFocus,\n      onKeyDown = props.onKeyDown,\n      onKeyUp = props.onKeyUp,\n      placeholder = props.placeholder,\n      readOnly = props.readOnly,\n      renderSuffix = props.renderSuffix,\n      rows = props.rows,\n      rowsMax = props.rowsMax,\n      _props$select = props.select,\n      select = _props$select === void 0 ? false : _props$select,\n      startAdornment = props.startAdornment,\n      _props$type = props.type,\n      type = _props$type === void 0 ? 'text' : _props$type,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"aria-describedby\", \"autoComplete\", \"autoFocus\", \"classes\", \"className\", \"defaultValue\", \"disabled\", \"endAdornment\", \"error\", \"fullWidth\", \"id\", \"inputComponent\", \"inputProps\", \"inputRef\", \"margin\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onClick\", \"onFocus\", \"onKeyDown\", \"onKeyUp\", \"placeholder\", \"readOnly\", \"renderSuffix\", \"rows\", \"rowsMax\", \"select\", \"startAdornment\", \"type\", \"value\"]);\n\n  var _React$useRef = React.useRef(value != null),\n      isControlled = _React$useRef.current;\n\n  var inputRef = React.useRef();\n  var handleInputRefWarning = React.useCallback(function (instance) {\n    process.env.NODE_ENV !== \"production\" ? warning(!instance || instance instanceof HTMLInputElement || instance.focus, ['Material-UI: you have provided a `inputComponent` to the input component', 'that does not correctly handle the `inputRef` prop.', 'Make sure the `inputRef` prop is called with a HTMLInputElement.'].join('\\n')) : void 0;\n  }, []);\n  var handleInputPropsRefProp = useForkRef(inputPropsProp.ref, handleInputRefWarning);\n  var handleInputRefProp = useForkRef(inputRefProp, handleInputPropsRefProp);\n  var handleInputRef = useForkRef(inputRef, handleInputRefProp);\n\n  var _React$useState = React.useState(false),\n      focused = _React$useState[0],\n      setFocused = _React$useState[1];\n\n  var muiFormControl = useFormControl();\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      if (muiFormControl) {\n        return muiFormControl.registerEffect();\n      }\n\n      return undefined;\n    }, [muiFormControl]);\n  }\n\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['disabled', 'error', 'hiddenLabel', 'margin', 'required', 'filled']\n  });\n  fcs.focused = muiFormControl ? muiFormControl.focused : focused; // The blur won't fire when the disabled state is set on a focused input.\n  // We need to book keep the focused state manually.\n\n  React.useEffect(function () {\n    if (!muiFormControl && disabled && focused) {\n      setFocused(false);\n\n      if (onBlur) {\n        onBlur();\n      }\n    }\n  }, [muiFormControl, disabled, focused, onBlur]);\n  var checkDirty = React.useCallback(function (obj) {\n    if (isFilled(obj)) {\n      if (muiFormControl && muiFormControl.onFilled) {\n        muiFormControl.onFilled();\n      }\n    } else if (muiFormControl && muiFormControl.onEmpty) {\n      muiFormControl.onEmpty();\n    }\n  }, [muiFormControl]);\n  useEnhancedEffect(function () {\n    if (isControlled) {\n      checkDirty({\n        value: value\n      });\n    }\n  }, [value, checkDirty, isControlled]);\n\n  var handleFocus = function handleFocus(event) {\n    // Fix a bug with IE 11 where the focus/blur events are triggered\n    // while the input is disabled.\n    if (fcs.disabled) {\n      event.stopPropagation();\n      return;\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n\n    if (muiFormControl && muiFormControl.onFocus) {\n      muiFormControl.onFocus(event);\n    } else {\n      setFocused(true);\n    }\n  };\n\n  var handleBlur = function handleBlur(event) {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    if (muiFormControl && muiFormControl.onBlur) {\n      muiFormControl.onBlur(event);\n    } else {\n      setFocused(false);\n    }\n  };\n\n  var handleChange = function handleChange(event) {\n    if (!isControlled) {\n      var element = event.target || inputRef.current;\n\n      if (element == null) {\n        throw new TypeError('Material-UI: Expected valid input target. ' + 'Did you use a custom `inputComponent` and forget to forward refs? ' + 'See https://material-ui.com/r/input-component-ref-interface for more info.');\n      }\n\n      checkDirty({\n        value: element.value\n      });\n    } // Perform in the willUpdate\n\n\n    if (onChange) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      onChange.apply(void 0, [event].concat(args));\n    }\n  };\n\n  var handleClick = function handleClick(event) {\n    if (inputRef.current && event.currentTarget === event.target) {\n      inputRef.current.focus();\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  var InputComponent = inputComponent;\n\n  var inputProps = _extends({}, inputPropsProp, {\n    ref: handleInputRef\n  });\n\n  if (typeof InputComponent !== 'string') {\n    inputProps = _extends({\n      // Rename ref to inputRef as we don't know the\n      // provided `inputComponent` structure.\n      inputRef: handleInputRef,\n      type: type\n    }, inputProps, {\n      ref: null\n    });\n  } else if (multiline) {\n    if (rows && !rowsMax) {\n      InputComponent = 'textarea';\n    } else {\n      inputProps = _extends({\n        rows: rows,\n        rowsMax: rowsMax\n      }, inputProps);\n      InputComponent = TextareaAutosize;\n    }\n  } else {\n    inputProps = _extends({\n      type: type\n    }, inputProps);\n  }\n\n  return React.createElement(\"div\", _extends({\n    className: clsx(classes.root, classNameProp, fcs.disabled && classes.disabled, fcs.error && classes.error, fullWidth && classes.fullWidth, fcs.focused && classes.focused, muiFormControl && classes.formControl, multiline && classes.multiline, startAdornment && classes.adornedStart, endAdornment && classes.adornedEnd, {\n      dense: classes.marginDense\n    }[fcs.margin]),\n    onClick: handleClick,\n    ref: ref\n  }, other), startAdornment, React.createElement(FormControlContext.Provider, {\n    value: null\n  }, React.createElement(InputComponent, _extends({\n    \"aria-invalid\": fcs.error,\n    \"aria-describedby\": ariaDescribedby,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    className: clsx(classes.input, inputPropsClassName, fcs.disabled && classes.disabled, multiline && classes.inputMultiline, select && classes.inputSelect, fcs.hiddenLabel && classes.inputHiddenLabel, startAdornment && classes.inputAdornedStart, endAdornment && classes.inputAdornedEnd, {\n      search: classes.inputTypeSearch\n    }[type], {\n      dense: classes.inputMarginDense\n    }[fcs.margin]),\n    defaultValue: defaultValue,\n    disabled: fcs.disabled,\n    id: id,\n    name: name,\n    onBlur: handleBlur,\n    onChange: handleChange,\n    onFocus: handleFocus,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    placeholder: placeholder,\n    readOnly: readOnly,\n    required: fcs.required,\n    rows: rows,\n    value: value\n  }, inputProps))), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {\n    startAdornment: startAdornment\n  })) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? InputBase.propTypes = {\n  /**\n   * @ignore\n   */\n  'aria-describedby': PropTypes.string,\n\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * The CSS class name of the wrapper element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default `input` element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * End `InputAdornment` for this component.\n   */\n  endAdornment: PropTypes.node,\n\n  /**\n   * If `true`, the input will indicate an error. This is normally obtained via context from\n   * FormControl.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * The component used for the `input` element.\n   * Either a string to use a DOM element or a component.\n   */\n  inputComponent: PropTypes.elementType,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * This prop can be used to pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense', 'none']),\n\n  /**\n   * If `true`, a textarea element will be rendered.\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyUp: PropTypes.func,\n\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  renderSuffix: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Should be `true` when the component hosts a select.\n   */\n  select: PropTypes.bool,\n\n  /**\n   * Start `InputAdornment` for this component.\n   */\n  startAdornment: PropTypes.node,\n\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiInputBase'\n})(InputBase);","export default function formControlState(_ref) {\n  var props = _ref.props,\n      states = _ref.states,\n      muiFormControl = _ref.muiFormControl;\n  return states.reduce(function (acc, state) {\n    acc[state] = props[state];\n\n    if (muiFormControl) {\n      if (typeof props[state] === 'undefined') {\n        acc[state] = muiFormControl[state];\n      }\n    }\n\n    return acc;\n  }, {});\n}","// Supports determination of isControlled().\n// Controlled input accepts its current value as a prop.\n//\n// @see https://facebook.github.io/react/docs/forms.html#controlled-components\n// @param value\n// @returns {boolean} true if string (including '') or number (including zero)\nexport function hasValue(value) {\n  return value != null && !(Array.isArray(value) && value.length === 0);\n} // Determine if field is empty or filled.\n// Response determines if label is presented above field or as placeholder.\n//\n// @param obj\n// @param SSR\n// @returns {boolean} False when not present or empty string.\n//                    True when any number or string with length.\n\nexport function isFilled(obj) {\n  var SSR = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');\n} // Determine if an Input is adorned on start.\n// It's corresponding to the left with LTR.\n//\n// @param obj\n// @returns {boolean} False when no adornments.\n//                    True when adorned at the start.\n\nexport function isAdornedStart(obj) {\n  return obj.startAdornment;\n}"],"sourceRoot":""}